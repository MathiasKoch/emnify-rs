/*
 * EMnify Rest API
 *
 * Rest API resources of the EMnify System.
 *
 * The version of the OpenAPI document: 1.2.26
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method `tariff_profile_by_id_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TariffProfileByIdDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `tariff_profile_by_id_get`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TariffProfileByIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `tariff_profile_by_id_patch`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TariffProfileByIdPatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `tariff_profile_coverage_by_tp_id_get`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TariffProfileCoverageByTpIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `tariff_profile_get`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TariffProfileGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `tariff_profile_post`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TariffProfilePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `tariff_profile_ratezone_selection_by_tp_id_and_rz_id_delete`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TariffProfileRatezoneSelectionByTpIdAndRzIdDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `tariff_profile_ratezone_selection_by_tp_id_and_rz_id_put`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TariffProfileRatezoneSelectionByTpIdAndRzIdPutError {
    UnknownValue(serde_json::Value),
}


/// Deletes tariff profile. Tariff profiles used by an endpoint (`used_count` > 0) cannot be deleted.
pub async fn tariff_profile_by_id_delete(configuration: &configuration::Configuration, tariff_profile_id: f32) -> Result<(), Error<TariffProfileByIdDeleteError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/tariff_profile/{tariff_profile_id}", configuration.base_path, tariff_profile_id=tariff_profile_id);
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<TariffProfileByIdDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns tariff profile specified by id. This tariff profile also contains information about the currently valid ratezones of the tariff in the tariff profile and if the ratezone is selected in the tariff profile. It also contains applied custom rates for the included tariffs. 
pub async fn tariff_profile_by_id_get(configuration: &configuration::Configuration, tariff_profile_id: f32) -> Result<serde_json::Value, Error<TariffProfileByIdGetError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/tariff_profile/{tariff_profile_id}", configuration.base_path, tariff_profile_id=tariff_profile_id);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TariffProfileByIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Patch the specified tariff profile.  You can provide following fields with this request:  * `name` (String optional) * `description` (String optional) * `tariff` (Object optional) If the tariff is changed, all selections of ratezones are removed. 
pub async fn tariff_profile_by_id_patch(configuration: &configuration::Configuration, tariff_profile_id: f32, patch_tariff_profilerequest: crate::models::PatchTariffProfilerequest) -> Result<(), Error<TariffProfileByIdPatchError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/tariff_profile/{tariff_profile_id}", configuration.base_path, tariff_profile_id=tariff_profile_id);
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&patch_tariff_profilerequest);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<TariffProfileByIdPatchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Provides the list of countries where that tariff profile can be used.
pub async fn tariff_profile_coverage_by_tp_id_get(configuration: &configuration::Configuration, tariff_profile_id: f32) -> Result<Vec<crate::models::RetrieveCoverageresponse>, Error<TariffProfileCoverageByTpIdGetError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/tariff_profile/{tariff_profile_id}/coverage", configuration.base_path, tariff_profile_id=tariff_profile_id);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TariffProfileCoverageByTpIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns the list of tariff profiles of the user's own organisation.
pub async fn tariff_profile_get(configuration: &configuration::Configuration, ) -> Result<Vec<crate::models::ListofTariffProfilesresponse>, Error<TariffProfileGetError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/tariff_profile", configuration.base_path);
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TariffProfileGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create the specified tariff profile ID must not be specified, neither in query String, nor in JSON payload. You can provide following fields with this request:  * `name` (String required) * `description` (String optional) * `tariff` (Object required) 
pub async fn tariff_profile_post(configuration: &configuration::Configuration, create_tariff_profilerequest: crate::models::CreateTariffProfilerequest) -> Result<(), Error<TariffProfilePostError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/tariff_profile", configuration.base_path);
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_tariff_profilerequest);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<TariffProfilePostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove previously selected ratezones from a tariff profile
pub async fn tariff_profile_ratezone_selection_by_tp_id_and_rz_id_delete(configuration: &configuration::Configuration, tariff_profile_id: f32, ratezone_id: f32) -> Result<(), Error<TariffProfileRatezoneSelectionByTpIdAndRzIdDeleteError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/tariff_profile/{tariff_profile_id}/ratezone_selection/{ratezone_id}", configuration.base_path, tariff_profile_id=tariff_profile_id, ratezone_id=ratezone_id);
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<TariffProfileRatezoneSelectionByTpIdAndRzIdDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Only currently valid and active ratezones can be selected for a tariff profile
pub async fn tariff_profile_ratezone_selection_by_tp_id_and_rz_id_put(configuration: &configuration::Configuration, tariff_profile_id: f32, ratezone_id: f32) -> Result<(), Error<TariffProfileRatezoneSelectionByTpIdAndRzIdPutError>> {

    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/tariff_profile/{tariff_profile_id}/ratezone_selection/{ratezone_id}", configuration.base_path, tariff_profile_id=tariff_profile_id, ratezone_id=ratezone_id);
    let mut local_var_req_builder = local_var_client.put(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if local_var_status.is_success() {
        Ok(())
    } else {
        let local_var_entity: Option<TariffProfileRatezoneSelectionByTpIdAndRzIdPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

