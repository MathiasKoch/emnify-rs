/*
 * EMnify Rest API
 *
 * Rest API resources of the EMnify System.
 *
 * The version of the OpenAPI document: 1.3
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`get_organisation_active_tariff_plan`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganisationActiveTariffPlanError {
    Status404(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organisation_tariff_plan_by_org_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganisationTariffPlanByOrgIdGetError {
    UnknownValue(serde_json::Value),
}

/// Retrieve detailed information about the currently assigned `tariff_plan` of the given organisation. It can either be accessed for the own organisation or a direct child organisation. The `applied_price` field is calculated using the currently active SIM cards for the month.
pub async fn get_organisation_active_tariff_plan(
    configuration: &configuration::Configuration,
    org_id_or_my: &str,
) -> Result<
    crate::models::GetOrganisationActiveTariffPlanResponse,
    Error<GetOrganisationActiveTariffPlanError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/organisation/{org_id_or_my}/tariff_plan/active",
        local_var_configuration.base_path,
        org_id_or_my = crate::apis::urlencode(org_id_or_my)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetOrganisationActiveTariffPlanError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all Tariff Plans that are available for the given organisation. The available tariff plans for one's own organisation can also be retrieved with a call to `/api/v1/organisation/my/tariff_plan`
pub async fn organisation_tariff_plan_by_org_id_get(
    configuration: &configuration::Configuration,
    org_id: f32,
) -> Result<
    Vec<crate::models::OrganisationTariffPlanByOrgIdGet200ResponseInner>,
    Error<OrganisationTariffPlanByOrgIdGetError>,
> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v1/organisation/{org_id}/tariff_plan",
        local_var_configuration.base_path,
        org_id = org_id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<OrganisationTariffPlanByOrgIdGetError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
