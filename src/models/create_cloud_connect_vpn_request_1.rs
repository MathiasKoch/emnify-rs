/*
 * EMnify Rest API
 *
 * Rest API resources of the EMnify System.
 *
 * The version of the OpenAPI document: 1.2.26
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateCloudConnectVpnRequest1 {
    #[serde(rename = "type")]
    pub _type: Type,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// the public ip of the VPN server to attach to
    #[serde(rename = "public_ip")]
    pub public_ip: String,
    /// the PSK for the connection, if left empty it is generated by aws
    #[serde(rename = "psk", skip_serializing_if = "Option::is_none")]
    pub psk: Option<String>,
    /// if type = `3` is selected, this parameter must be specified and denotes the autonomous system number
    #[serde(rename = "asn", skip_serializing_if = "Option::is_none")]
    pub asn: Option<i32>,
    #[serde(rename = "premise_cidr")]
    pub premise_cidr: Vec<String>,
    /// up to 3 private ip address ranges denoting the BGP routers CIDR. if left empty, these are generated
    #[serde(rename = "inside_cidr", skip_serializing_if = "Option::is_none")]
    pub inside_cidr: Option<Vec<String>>,
}

impl CreateCloudConnectVpnRequest1 {
    pub fn new(_type: Type, name: String, public_ip: String, premise_cidr: Vec<String>) -> CreateCloudConnectVpnRequest1 {
        CreateCloudConnectVpnRequest1 {
            _type,
            name,
            description: None,
            region: None,
            public_ip,
            psk: None,
            asn: None,
            premise_cidr,
            inside_cidr: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "2")]
    _2,
    #[serde(rename = "3")]
    _3,
}

