/*
 * EMnify Rest API
 *
 * Rest API resources of the EMnify System.
 *
 * The version of the OpenAPI document: 1.3
 *
 * Generated by: https://openapi-generator.tech
 */

/// ListDataStreamerV2s200ResponseDestinationCredentials : Destination credentials

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ListDataStreamerV2s200ResponseDestinationCredentials {
    /// Datadog region. Options are `US` (default), `US3`, `EU` and `US1FED`
    #[serde(rename = "region")]
    pub region: String,
    /// Name of your Kinesis Data Stream
    #[serde(rename = "stream_name")]
    pub stream_name: String,
    /// Role ARN of IAM role with write permission for your S3 bucket
    #[serde(rename = "role_arn")]
    pub role_arn: String,
    /// Name of your S3 bucket
    #[serde(rename = "bucket_name")]
    pub bucket_name: String,
    /// Maximal number of entries in a single file. Default is `10000`. Valid flush sizes are between 10 and 100000.
    #[serde(rename = "flush_size", skip_serializing_if = "Option::is_none")]
    pub flush_size: Option<i32>,
    /// Maximal time in milliseconds between file writes. Default is `10000` ms. Valid rotation intervals are between 10000 ms and 900000 ms.
    #[serde(rename = "rotate_interval", skip_serializing_if = "Option::is_none")]
    pub rotate_interval: Option<i32>,
    /// URL of your Webhook / RestAPI endpoint
    #[serde(rename = "url")]
    pub url: String,
    /// HTTP Method to use. Options are `POST` (default), `PUT` and `PATCH`
    #[serde(rename = "method", skip_serializing_if = "Option::is_none")]
    pub method: Option<String>,
    /// Array containing additional header tuples. Expected Format is `[\"header1:value1, \"header2:value2\", ...]`. Headers are masked in GET request.
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<String>>,
    /// Number specifying of request should contain `1` message or an array of messages of the specified batch size. Default is `3000`. Valid sizes are between 1 and 10000.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    /// Project ID reported by KeenIO
    #[serde(rename = "project_id")]
    pub project_id: String,
    /// Write key of your KeenIO Project.
    #[serde(rename = "write_key")]
    pub write_key: String,
    /// Collection Name that you want to stream your data to.
    #[serde(rename = "collection_name")]
    pub collection_name: String,
    /// Datadog API Key
    #[serde(rename = "api_key")]
    pub api_key: String,
    /// Connection string with Access Key to your Event Hub.
    #[serde(rename = "connection_string")]
    pub connection_string: String,
    /// Topic name of PubSub topic
    #[serde(rename = "cps_topic")]
    pub cps_topic: String,
    /// Project ID of the topic project.
    #[serde(rename = "cps_project")]
    pub cps_project: String,
}

impl ListDataStreamerV2s200ResponseDestinationCredentials {
    /// Destination credentials
    pub fn new(
        region: String,
        stream_name: String,
        role_arn: String,
        bucket_name: String,
        url: String,
        project_id: String,
        write_key: String,
        collection_name: String,
        api_key: String,
        connection_string: String,
        cps_topic: String,
        cps_project: String,
    ) -> ListDataStreamerV2s200ResponseDestinationCredentials {
        ListDataStreamerV2s200ResponseDestinationCredentials {
            region,
            stream_name,
            role_arn,
            bucket_name,
            flush_size: None,
            rotate_interval: None,
            url,
            method: None,
            headers: None,
            size: None,
            project_id,
            write_key,
            collection_name,
            api_key,
            connection_string,
            cps_topic,
            cps_project,
        }
    }
}
